/**
 * Given a string, we have to find out all its subsequences of it. A String 
 * is a subsequence of a given String, that is generated by deleting some 
 * character of a given string without changing its order.
 */

/**
 * Input  : abc
 * Output : a, b, c, ab, bc, ac, abc
 */

/**
 * Recursive Tree         Node -> (input, output)
 * 
 *                                  ("abc", "")
 *                                 /           \
 *                                /             \
 *                               /               \
 *                      ("bc", "")                ("bc", "a")
 *                      /        \                 /         \
 *                     /          \               /           \ 
 *                    /            \             /             \
 *              ("c", "")      ("c", "b")      ("c", "a")       ("c", "ab") 
 *              /  \          /    \                 /   \               / \
 *             /    \        /      \               /     \             /   \ 
 *            /      \      /        \             /       \           /     \
 *    ("", "") ("", "c")  ("", "b") ("", "bc")  ("", "a") ("", "ac")  ("", "ab") ("", "abc")
 * 
 */

function solution(input, output) {

    // if the input is empty print the output string
    if (input.length === 0) {
        console.log(`"${output}"`);
        return;
    }

    // output is passed with including the Ist character of Input string
    solution(input.substr(1), output + input[0]);

    // output is passed without including the Ist character of Input string
    solution(input.substr(1), output);
}

let input  = "abc";
let output = "";

solution(input, output);
